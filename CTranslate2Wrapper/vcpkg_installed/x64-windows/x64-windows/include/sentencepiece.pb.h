// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sentencepiece.proto
// Protobuf C++ Version: 5.29.5

#ifndef sentencepiece_2eproto_2epb_2eh
#define sentencepiece_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sentencepiece_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sentencepiece_2eproto {
  static const ::uint32_t offsets[];
};
namespace sentencepiece {
class NBestSentencePieceText;
struct NBestSentencePieceTextDefaultTypeInternal;
extern NBestSentencePieceTextDefaultTypeInternal _NBestSentencePieceText_default_instance_;
class SentencePieceText;
struct SentencePieceTextDefaultTypeInternal;
extern SentencePieceTextDefaultTypeInternal _SentencePieceText_default_instance_;
class SentencePieceText_SentencePiece;
struct SentencePieceText_SentencePieceDefaultTypeInternal;
extern SentencePieceText_SentencePieceDefaultTypeInternal _SentencePieceText_SentencePiece_default_instance_;
}  // namespace sentencepiece
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sentencepiece {

// ===================================================================


// -------------------------------------------------------------------

class SentencePieceText_SentencePiece final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText.SentencePiece) */ {
 public:
  inline SentencePieceText_SentencePiece() : SentencePieceText_SentencePiece(nullptr) {}
  ~SentencePieceText_SentencePiece() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SentencePieceText_SentencePiece* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SentencePieceText_SentencePiece));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SentencePieceText_SentencePiece(
      ::google::protobuf::internal::ConstantInitialized);

  inline SentencePieceText_SentencePiece(const SentencePieceText_SentencePiece& from) : SentencePieceText_SentencePiece(nullptr, from) {}
  inline SentencePieceText_SentencePiece(SentencePieceText_SentencePiece&& from) noexcept
      : SentencePieceText_SentencePiece(nullptr, std::move(from)) {}
  inline SentencePieceText_SentencePiece& operator=(const SentencePieceText_SentencePiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentencePieceText_SentencePiece& operator=(SentencePieceText_SentencePiece&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SentencePieceText_SentencePiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentencePieceText_SentencePiece* internal_default_instance() {
    return reinterpret_cast<const SentencePieceText_SentencePiece*>(
        &_SentencePieceText_SentencePiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SentencePieceText_SentencePiece& a, SentencePieceText_SentencePiece& b) { a.Swap(&b); }
  inline void Swap(SentencePieceText_SentencePiece* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentencePieceText_SentencePiece* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SentencePieceText_SentencePiece* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<SentencePieceText_SentencePiece>(arena);
  }
  void CopyFrom(const SentencePieceText_SentencePiece& from);
  void MergeFrom(const SentencePieceText_SentencePiece& from) { SentencePieceText_SentencePiece::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SentencePieceText_SentencePiece* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sentencepiece.SentencePieceText.SentencePiece"; }

 protected:
  explicit SentencePieceText_SentencePiece(::google::protobuf::Arena* arena);
  SentencePieceText_SentencePiece(::google::protobuf::Arena* arena, const SentencePieceText_SentencePiece& from);
  SentencePieceText_SentencePiece(::google::protobuf::Arena* arena, SentencePieceText_SentencePiece&& from) noexcept
      : SentencePieceText_SentencePiece(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<46> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPieceFieldNumber = 1,
    kSurfaceFieldNumber = 3,
    kIdFieldNumber = 2,
    kBeginFieldNumber = 4,
    kEndFieldNumber = 5,
  };
  // optional string piece = 1;
  bool has_piece() const;
  void clear_piece() ;
  const std::string& piece() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_piece(Arg_&& arg, Args_... args);
  std::string* mutable_piece();
  PROTOBUF_NODISCARD std::string* release_piece();
  void set_allocated_piece(std::string* value);

  private:
  const std::string& _internal_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_piece(
      const std::string& value);
  std::string* _internal_mutable_piece();

  public:
  // optional string surface = 3;
  bool has_surface() const;
  void clear_surface() ;
  const std::string& surface() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_surface(Arg_&& arg, Args_... args);
  std::string* mutable_surface();
  PROTOBUF_NODISCARD std::string* release_surface();
  void set_allocated_surface(std::string* value);

  private:
  const std::string& _internal_surface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surface(
      const std::string& value);
  std::string* _internal_mutable_surface();

  public:
  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 begin = 4;
  bool has_begin() const;
  void clear_begin() ;
  ::uint32_t begin() const;
  void set_begin(::uint32_t value);

  private:
  ::uint32_t _internal_begin() const;
  void _internal_set_begin(::uint32_t value);

  public:
  // optional uint32 end = 5;
  bool has_end() const;
  void clear_end() ;
  ::uint32_t end() const;
  void set_end(::uint32_t value);

  private:
  ::uint32_t _internal_end() const;
  void _internal_set_end(::uint32_t value);

  public:
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText.SentencePiece)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SentencePieceText_SentencePiece& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr piece_;
    ::google::protobuf::internal::ArenaStringPtr surface_;
    ::uint32_t id_;
    ::uint32_t begin_;
    ::uint32_t end_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_2eproto;
};
// -------------------------------------------------------------------

class SentencePieceText final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText) */ {
 public:
  inline SentencePieceText() : SentencePieceText(nullptr) {}
  ~SentencePieceText() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SentencePieceText* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SentencePieceText));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SentencePieceText(
      ::google::protobuf::internal::ConstantInitialized);

  inline SentencePieceText(const SentencePieceText& from) : SentencePieceText(nullptr, from) {}
  inline SentencePieceText(SentencePieceText&& from) noexcept
      : SentencePieceText(nullptr, std::move(from)) {}
  inline SentencePieceText& operator=(const SentencePieceText& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentencePieceText& operator=(SentencePieceText&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SentencePieceText& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentencePieceText* internal_default_instance() {
    return reinterpret_cast<const SentencePieceText*>(
        &_SentencePieceText_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SentencePieceText& a, SentencePieceText& b) { a.Swap(&b); }
  inline void Swap(SentencePieceText* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentencePieceText* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SentencePieceText* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<SentencePieceText>(arena);
  }
  void CopyFrom(const SentencePieceText& from);
  void MergeFrom(const SentencePieceText& from) { SentencePieceText::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SentencePieceText* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sentencepiece.SentencePieceText"; }

 protected:
  explicit SentencePieceText(::google::protobuf::Arena* arena);
  SentencePieceText(::google::protobuf::Arena* arena, const SentencePieceText& from);
  SentencePieceText(::google::protobuf::Arena* arena, SentencePieceText&& from) noexcept
      : SentencePieceText(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<32> _class_data_;

 public:
  // nested types ----------------------------------------------------
  using SentencePiece = SentencePieceText_SentencePiece;

  // accessors -------------------------------------------------------
  enum : int {
    kPiecesFieldNumber = 2,
    kTextFieldNumber = 1,
    kScoreFieldNumber = 3,
  };
  // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
  int pieces_size() const;
  private:
  int _internal_pieces_size() const;

  public:
  void clear_pieces() ;
  ::sentencepiece::SentencePieceText_SentencePiece* mutable_pieces(int index);
  ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>* mutable_pieces();

  private:
  const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>& _internal_pieces() const;
  ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>* _internal_mutable_pieces();
  public:
  const ::sentencepiece::SentencePieceText_SentencePiece& pieces(int index) const;
  ::sentencepiece::SentencePieceText_SentencePiece* add_pieces();
  const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>& pieces() const;
  // optional string text = 1;
  bool has_text() const;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // optional float score = 3;
  bool has_score() const;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<SentencePieceText, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SentencePieceText& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece > pieces_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    float score_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_2eproto;
};
// -------------------------------------------------------------------

class NBestSentencePieceText final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:sentencepiece.NBestSentencePieceText) */ {
 public:
  inline NBestSentencePieceText() : NBestSentencePieceText(nullptr) {}
  ~NBestSentencePieceText() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NBestSentencePieceText* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NBestSentencePieceText));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NBestSentencePieceText(
      ::google::protobuf::internal::ConstantInitialized);

  inline NBestSentencePieceText(const NBestSentencePieceText& from) : NBestSentencePieceText(nullptr, from) {}
  inline NBestSentencePieceText(NBestSentencePieceText&& from) noexcept
      : NBestSentencePieceText(nullptr, std::move(from)) {}
  inline NBestSentencePieceText& operator=(const NBestSentencePieceText& from) {
    CopyFrom(from);
    return *this;
  }
  inline NBestSentencePieceText& operator=(NBestSentencePieceText&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NBestSentencePieceText& default_instance() {
    return *internal_default_instance();
  }
  static inline const NBestSentencePieceText* internal_default_instance() {
    return reinterpret_cast<const NBestSentencePieceText*>(
        &_NBestSentencePieceText_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NBestSentencePieceText& a, NBestSentencePieceText& b) { a.Swap(&b); }
  inline void Swap(NBestSentencePieceText* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NBestSentencePieceText* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NBestSentencePieceText* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NBestSentencePieceText>(arena);
  }
  void CopyFrom(const NBestSentencePieceText& from);
  void MergeFrom(const NBestSentencePieceText& from) { NBestSentencePieceText::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NBestSentencePieceText* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sentencepiece.NBestSentencePieceText"; }

 protected:
  explicit NBestSentencePieceText(::google::protobuf::Arena* arena);
  NBestSentencePieceText(::google::protobuf::Arena* arena, const NBestSentencePieceText& from);
  NBestSentencePieceText(::google::protobuf::Arena* arena, NBestSentencePieceText&& from) noexcept
      : NBestSentencePieceText(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<37> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNbestsFieldNumber = 1,
  };
  // repeated .sentencepiece.SentencePieceText nbests = 1;
  int nbests_size() const;
  private:
  int _internal_nbests_size() const;

  public:
  void clear_nbests() ;
  ::sentencepiece::SentencePieceText* mutable_nbests(int index);
  ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>* mutable_nbests();

  private:
  const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>& _internal_nbests() const;
  ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>* _internal_mutable_nbests();
  public:
  const ::sentencepiece::SentencePieceText& nbests(int index) const;
  ::sentencepiece::SentencePieceText* add_nbests();
  const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>& nbests() const;
  // @@protoc_insertion_point(class_scope:sentencepiece.NBestSentencePieceText)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NBestSentencePieceText& from_msg);
    ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText > nbests_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SentencePieceText_SentencePiece

// optional string piece = 1;
inline bool SentencePieceText_SentencePiece::has_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SentencePieceText_SentencePiece::clear_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.piece_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SentencePieceText_SentencePiece::piece() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.piece)
  return _internal_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SentencePieceText_SentencePiece::set_piece(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.piece_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.piece)
}
inline std::string* SentencePieceText_SentencePiece::mutable_piece() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.piece)
  return _s;
}
inline const std::string& SentencePieceText_SentencePiece::_internal_piece() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.piece_.Get();
}
inline void SentencePieceText_SentencePiece::_internal_set_piece(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.piece_.Set(value, GetArena());
}
inline std::string* SentencePieceText_SentencePiece::_internal_mutable_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.piece_.Mutable( GetArena());
}
inline std::string* SentencePieceText_SentencePiece::release_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.piece)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.piece_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.piece_.Set("", GetArena());
  }
  return released;
}
inline void SentencePieceText_SentencePiece::set_allocated_piece(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.piece_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.piece_.IsDefault()) {
    _impl_.piece_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.piece)
}

// optional uint32 id = 2;
inline bool SentencePieceText_SentencePiece::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SentencePieceText_SentencePiece::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SentencePieceText_SentencePiece::id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.id)
  return _internal_id();
}
inline void SentencePieceText_SentencePiece::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.id)
}
inline ::uint32_t SentencePieceText_SentencePiece::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void SentencePieceText_SentencePiece::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional string surface = 3;
inline bool SentencePieceText_SentencePiece::has_surface() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SentencePieceText_SentencePiece::clear_surface() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.surface_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SentencePieceText_SentencePiece::surface() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.surface)
  return _internal_surface();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SentencePieceText_SentencePiece::set_surface(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.surface_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.surface)
}
inline std::string* SentencePieceText_SentencePiece::mutable_surface() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_surface();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.surface)
  return _s;
}
inline const std::string& SentencePieceText_SentencePiece::_internal_surface() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.surface_.Get();
}
inline void SentencePieceText_SentencePiece::_internal_set_surface(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.surface_.Set(value, GetArena());
}
inline std::string* SentencePieceText_SentencePiece::_internal_mutable_surface() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.surface_.Mutable( GetArena());
}
inline std::string* SentencePieceText_SentencePiece::release_surface() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.surface)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.surface_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.surface_.Set("", GetArena());
  }
  return released;
}
inline void SentencePieceText_SentencePiece::set_allocated_surface(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.surface_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.surface_.IsDefault()) {
    _impl_.surface_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.surface)
}

// optional uint32 begin = 4;
inline bool SentencePieceText_SentencePiece::has_begin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SentencePieceText_SentencePiece::clear_begin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SentencePieceText_SentencePiece::begin() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.begin)
  return _internal_begin();
}
inline void SentencePieceText_SentencePiece::set_begin(::uint32_t value) {
  _internal_set_begin(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.begin)
}
inline ::uint32_t SentencePieceText_SentencePiece::_internal_begin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.begin_;
}
inline void SentencePieceText_SentencePiece::_internal_set_begin(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_ = value;
}

// optional uint32 end = 5;
inline bool SentencePieceText_SentencePiece::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SentencePieceText_SentencePiece::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SentencePieceText_SentencePiece::end() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.end)
  return _internal_end();
}
inline void SentencePieceText_SentencePiece::set_end(::uint32_t value) {
  _internal_set_end(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.end)
}
inline ::uint32_t SentencePieceText_SentencePiece::_internal_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_;
}
inline void SentencePieceText_SentencePiece::_internal_set_end(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// SentencePieceText

// optional string text = 1;
inline bool SentencePieceText::has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SentencePieceText::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SentencePieceText::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SentencePieceText::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.text)
}
inline std::string* SentencePieceText::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.text)
  return _s;
}
inline const std::string& SentencePieceText::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void SentencePieceText::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* SentencePieceText::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* SentencePieceText::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.text)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.text_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.text_.Set("", GetArena());
  }
  return released;
}
inline void SentencePieceText::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.text)
}

// repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
inline int SentencePieceText::_internal_pieces_size() const {
  return _internal_pieces().size();
}
inline int SentencePieceText::pieces_size() const {
  return _internal_pieces_size();
}
inline void SentencePieceText::clear_pieces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pieces_.Clear();
}
inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::mutable_pieces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.pieces)
  return _internal_mutable_pieces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>* SentencePieceText::mutable_pieces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.SentencePieceText.pieces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pieces();
}
inline const ::sentencepiece::SentencePieceText_SentencePiece& SentencePieceText::pieces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.pieces)
  return _internal_pieces().Get(index);
}
inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::add_pieces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sentencepiece::SentencePieceText_SentencePiece* _add = _internal_mutable_pieces()->Add();
  // @@protoc_insertion_point(field_add:sentencepiece.SentencePieceText.pieces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>& SentencePieceText::pieces() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sentencepiece.SentencePieceText.pieces)
  return _internal_pieces();
}
inline const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>&
SentencePieceText::_internal_pieces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pieces_;
}
inline ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText_SentencePiece>*
SentencePieceText::_internal_mutable_pieces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pieces_;
}

// optional float score = 3;
inline bool SentencePieceText::has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SentencePieceText::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SentencePieceText::score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.score)
  return _internal_score();
}
inline void SentencePieceText::set_score(float value) {
  _internal_set_score(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.score)
}
inline float SentencePieceText::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void SentencePieceText::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// NBestSentencePieceText

// repeated .sentencepiece.SentencePieceText nbests = 1;
inline int NBestSentencePieceText::_internal_nbests_size() const {
  return _internal_nbests().size();
}
inline int NBestSentencePieceText::nbests_size() const {
  return _internal_nbests_size();
}
inline void NBestSentencePieceText::clear_nbests() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nbests_.Clear();
}
inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::mutable_nbests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sentencepiece.NBestSentencePieceText.nbests)
  return _internal_mutable_nbests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>* NBestSentencePieceText::mutable_nbests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.NBestSentencePieceText.nbests)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nbests();
}
inline const ::sentencepiece::SentencePieceText& NBestSentencePieceText::nbests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sentencepiece.NBestSentencePieceText.nbests)
  return _internal_nbests().Get(index);
}
inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::add_nbests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sentencepiece::SentencePieceText* _add = _internal_mutable_nbests()->Add();
  // @@protoc_insertion_point(field_add:sentencepiece.NBestSentencePieceText.nbests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>& NBestSentencePieceText::nbests() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sentencepiece.NBestSentencePieceText.nbests)
  return _internal_nbests();
}
inline const ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>&
NBestSentencePieceText::_internal_nbests() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nbests_;
}
inline ::google::protobuf::RepeatedPtrField<::sentencepiece::SentencePieceText>*
NBestSentencePieceText::_internal_mutable_nbests() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nbests_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sentencepiece


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sentencepiece_2eproto_2epb_2eh
